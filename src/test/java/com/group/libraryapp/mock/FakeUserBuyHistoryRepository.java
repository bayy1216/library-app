package com.group.libraryapp.mock;

import com.group.libraryapp.domain.model.book.UserBuyHistory;
import com.group.libraryapp.domain.port.book.UserBuyHistoryRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserBuyHistoryRepository implements UserBuyHistoryRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<UserBuyHistory> data = Collections.synchronizedList(new ArrayList<>());
    @Override
    public UserBuyHistory save(UserBuyHistory userBuyHistory) {
        if(userBuyHistory.getId() == null) {
            UserBuyHistory generated = UserBuyHistory.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .user(userBuyHistory.getUser())
                    .book(userBuyHistory.getBook())
                    .createdDate(userBuyHistory.getCreatedDate())
                    .build();
            data.add(generated);
            return generated;
        }else{
            data.removeIf(b -> b.getId().equals(userBuyHistory.getId()));
            data.add(userBuyHistory);
            return userBuyHistory;
        }
    }

    @Override
    public Page<UserBuyHistory> getBuyHistory(Long userId, int page) {
        var pageRequest = PageRequest.of(page, 20);
        List<UserBuyHistory> content = new ArrayList<>(data);

        int start = (int)pageRequest.getOffset();
        int end = Math.min((start + pageRequest.getPageSize()), content.size());
        return new PageImpl<>(content.subList(start, end), pageRequest, content.size());
    }
}
