package com.group.libraryapp.mock;

import com.group.libraryapp.domain.model.user.User;
import com.group.libraryapp.domain.port.user.UserRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = Collections.synchronizedList(new ArrayList<>());
    @Override
    public Optional<User> findById(Long userId) {
        return data.stream().filter(b -> b.getId().equals(userId)).findFirst();
    }

    @Override
    public User save(User user) {
        if(user.getId() == null) {
            User generated = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .password(user.getPassword())
                    .build();
            data.add(generated);
            return generated;
        }else{
            data.removeIf(b -> b.getId().equals(user.getId()));
            data.add(user);
            return user;
        }
    }

    @Override
    public void delete(User user) {
        data.removeIf(b -> b.getId().equals(user.getId()));
    }

    @Override
    public Optional<User> findByEmail(String email) {
        return data.stream().filter(b -> b.getEmail().equals(email)).findFirst();
    }
}
