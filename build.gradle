plugins {
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
	id 'java'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}
group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

configurations {
	asciidoctorExt
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//junit5
	testImplementation 'org.junit.jupiter:junit-jupiter-api'

	//rest-docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	// asciidoctorExt에 의존성 추가
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	// MockMvc 의존성 추가

	//querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0'
	implementation 'com.querydsl:querydsl-apt:5.0.0'
	implementation 'com.querydsl:querydsl-core:5.0.0'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//bean validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	//jwt
	implementation "io.jsonwebtoken:jjwt:0.9.1"
	//spring security
	implementation 'org.springframework.boot:spring-boot-starter-security'
}
ext { // 스니펫 생성 디렉토리 설정
	snippetsDir = file('build/generated-snippets')
}

test { // 스니펫 생성 test 테스크 설정
	outputs.dir snippetsDir
}

asciidoctor { // asciidoctor 테스크 성정
	inputs.dir snippetsDir // 스니펫 위치 설정
	configurations 'asciidoctorExt' // asciidoctor 확장 설정
	dependsOn test // test 테스크 후 asciidoctor 실행 설정
}

def querydslDir = "$buildDir/generated/querydsl" //QueryDSL로 생성된 소스가 저장되는 위치

querydsl {
	jpa = true //JPA 사용여부 설정
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir// 빌드시 컴파일이 필요한 소스위치
}

//QueryDSL 컴파일시 참조할 설정정보
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath //외부라이브러리 컴파일 경로 상속
}
tasks.named('test') {
	useJUnitPlatform()
}
